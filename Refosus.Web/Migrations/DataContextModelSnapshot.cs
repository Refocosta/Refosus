// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Refosus.Web.Data;

namespace Refosus.Web.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("ClaimType")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ClaimValue")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("RoleId")
                    .IsRequired()
                    .HasColumnType("nvarchar(450)");

                b.HasKey("Id");

                b.HasIndex("RoleId");

                b.ToTable("AspNetRoleClaims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("ClaimType")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ClaimValue")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("UserId")
                    .IsRequired()
                    .HasColumnType("nvarchar(450)");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserClaims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
            {
                b.Property<string>("LoginProvider")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("ProviderKey")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("ProviderDisplayName")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("UserId")
                    .IsRequired()
                    .HasColumnType("nvarchar(450)");

                b.HasKey("LoginProvider", "ProviderKey");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserLogins");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
            {
                b.Property<string>("UserId")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("RoleId")
                    .HasColumnType("nvarchar(450)");

                b.HasKey("UserId", "RoleId");

                b.HasIndex("RoleId");

                b.ToTable("AspNetUserRoles");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
            {
                b.Property<string>("UserId")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("LoginProvider")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("Name")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("Value")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("UserId", "LoginProvider", "Name");

                b.ToTable("AspNetUserTokens");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.CampusDetailsEntity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<int?>("CampusId")
                    .HasColumnType("int");

                b.Property<int?>("CompanyId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("CampusId");

                b.HasIndex("CompanyId");

                b.ToTable("CampusDetails");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.CampusEntity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("Address")
                    .HasColumnType("nvarchar(100)")
                    .HasMaxLength(100);

                b.Property<int?>("CityId")
                    .HasColumnType("int");

                b.Property<DateTime>("CreateDate")
                    .HasColumnType("datetime2");

                b.Property<bool>("IsActive")
                    .HasColumnType("bit");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(50)")
                    .HasMaxLength(50);

                b.HasKey("Id");

                b.HasIndex("CityId");

                b.ToTable("Campus");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.CeCoEntity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("Code")
                    .IsRequired()
                    .HasColumnType("nvarchar(50)")
                    .HasMaxLength(50);

                b.Property<int?>("CompanyId")
                    .HasColumnType("int");

                b.Property<bool>("IsActive")
                    .HasColumnType("bit");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(50)")
                    .HasMaxLength(50);

                b.Property<int>("Type")
                    .HasColumnType("int");

                b.Property<string>("UserResponsibleId")
                    .HasColumnType("nvarchar(450)");

                b.HasKey("Id");

                b.HasIndex("CompanyId");

                b.HasIndex("UserResponsibleId");

                b.ToTable("CeCos");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.CityEntity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<int?>("DepartmentId")
                    .HasColumnType("int");

                b.Property<bool>("IsActive")
                    .HasColumnType("bit");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(50)")
                    .HasMaxLength(50);

                b.HasKey("Id");

                b.HasIndex("DepartmentId");

                b.ToTable("Cities");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.CompanyEntity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("Code")
                    .HasColumnType("nvarchar(450)");

                b.Property<bool>("IsActive")
                    .HasColumnType("bit");

                b.Property<string>("LogoPath")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(50)")
                    .HasMaxLength(50);

                b.HasKey("Id");

                b.HasIndex("Code")
                    .IsUnique()
                    .HasFilter("[Code] IS NOT NULL");

                b.HasIndex("Name")
                    .IsUnique();

                b.ToTable("Companies");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.CountryEntity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<bool>("IsActive")
                    .HasColumnType("bit");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(50)")
                    .HasMaxLength(50);

                b.HasKey("Id");

                b.ToTable("Countries");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.DepartmentEntity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<int?>("CountryId")
                    .HasColumnType("int");

                b.Property<bool>("IsActive")
                    .HasColumnType("bit");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(50)")
                    .HasMaxLength(50);

                b.HasKey("Id");

                b.HasIndex("CountryId");

                b.ToTable("Deparments");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.DocumentTypeEntity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(50)")
                    .HasMaxLength(50);

                b.Property<string>("Nom")
                    .IsRequired()
                    .HasColumnType("nvarchar(10)")
                    .HasMaxLength(10);

                b.HasKey("Id");

                b.ToTable("DocumentTypes");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.MenuEntity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("Action")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Controller")
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("Hidden")
                    .HasColumnType("bit");

                b.Property<bool>("IsActive")
                    .HasColumnType("bit");

                b.Property<string>("LogoPath")
                    .HasColumnType("nvarchar(max)");

                b.Property<int?>("MenuId")
                    .HasColumnType("int");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.HasIndex("MenuId");

                b.ToTable("Menus");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.MessageBillStateEntity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<bool>("Active")
                    .HasColumnType("bit");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(50)")
                    .HasMaxLength(50);

                b.HasKey("Id");

                b.ToTable("MessagesBillState");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.MessageCheckEntity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<DateTime>("DateAut")
                    .HasColumnType("datetime2");

                b.Property<string>("UserId")
                    .HasColumnType("nvarchar(450)");

                b.Property<int?>("messageId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.HasIndex("messageId");

                b.ToTable("MessagesCheckes");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.MessageEntity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<int?>("CecoId")
                    .HasColumnType("int");

                b.Property<int?>("CompanyId")
                    .HasColumnType("int");

                b.Property<DateTime>("CreateDate")
                    .HasColumnType("datetime2");

                b.Property<DateTime>("DateAut")
                    .HasColumnType("datetime2");

                b.Property<DateTime>("DateProcess")
                    .HasColumnType("datetime2");

                b.Property<string>("NumberBill")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Observation")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Reference")
                    .IsRequired()
                    .HasColumnType("nvarchar(50)")
                    .HasMaxLength(50);

                b.Property<string>("Sender")
                    .IsRequired()
                    .HasColumnType("nvarchar(50)")
                    .HasMaxLength(50);

                b.Property<int?>("StateBillId")
                    .HasColumnType("int");

                b.Property<int?>("StateId")
                    .HasColumnType("int");

                b.Property<int?>("TypeId")
                    .HasColumnType("int");

                b.Property<DateTime>("UpdateDate")
                    .HasColumnType("datetime2");

                b.Property<string>("UserAutId")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("UserCreateId")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("UserId")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("UserProsId")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("UserSenderId")
                    .HasColumnType("nvarchar(450)");

                b.Property<int>("Value")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("CecoId");

                b.HasIndex("CompanyId");

                b.HasIndex("StateBillId");

                b.HasIndex("StateId");

                b.HasIndex("TypeId");

                b.HasIndex("UserAutId");

                b.HasIndex("UserCreateId");

                b.HasIndex("UserId");

                b.HasIndex("UserProsId");

                b.HasIndex("UserSenderId");

                b.ToTable("Messages");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.MessageFileEntity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("Ext")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("FilePath")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Name")
                    .HasColumnType("nvarchar(max)");

                b.Property<int?>("messageId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("messageId");

                b.ToTable("MessagesFile");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.MessageStateEntity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<bool>("Active")
                    .HasColumnType("bit");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(50)")
                    .HasMaxLength(50);

                b.HasKey("Id");

                b.ToTable("MessagesStates");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.MessageTypeEntity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<bool>("Active")
                    .HasColumnType("bit");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(50)")
                    .HasMaxLength(50);

                b.HasKey("Id");

                b.ToTable("MessagesTypes");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.MessagetransactionEntity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("Description")
                    .HasColumnType("nvarchar(max)");

                b.Property<int?>("MessageId")
                    .HasColumnType("int");

                b.Property<string>("Observation")
                    .HasColumnType("nvarchar(max)");

                b.Property<int?>("StateBillCreateId")
                    .HasColumnType("int");

                b.Property<int?>("StateBillUpdateId")
                    .HasColumnType("int");

                b.Property<int?>("StateCreateId")
                    .HasColumnType("int");

                b.Property<int?>("StateUpdateId")
                    .HasColumnType("int");

                b.Property<DateTime>("UpdateDate")
                    .HasColumnType("datetime2");

                b.Property<string>("UserBillAuthoId")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("UserBillFinishedId")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("UserCreateId")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("UserUpdateId")
                    .HasColumnType("nvarchar(450)");

                b.HasKey("Id");

                b.HasIndex("MessageId");

                b.HasIndex("StateBillCreateId");

                b.HasIndex("StateBillUpdateId");

                b.HasIndex("StateCreateId");

                b.HasIndex("StateUpdateId");

                b.HasIndex("UserBillAuthoId");

                b.HasIndex("UserBillFinishedId");

                b.HasIndex("UserCreateId");

                b.HasIndex("UserUpdateId");

                b.ToTable("MessagesTransaction");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.NewEntity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("Colour")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Content")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("LogoPath")
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("Public")
                    .HasColumnType("bit");

                b.Property<int>("Size")
                    .HasColumnType("int");

                b.Property<string>("Title")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.ToTable("News");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.ProjectEntity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("IdUserProjectBoss")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Name")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.ToTable("Projects");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.RoleEntity", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("IsActive")
                    .HasColumnType("bit");

                b.Property<string>("Name")
                    .HasColumnType("nvarchar(256)")
                    .HasMaxLength(256);

                b.Property<string>("NormalizedName")
                    .HasColumnType("nvarchar(256)")
                    .HasMaxLength(256);

                b.HasKey("Id");

                b.HasIndex("NormalizedName")
                    .IsUnique()
                    .HasName("RoleNameIndex")
                    .HasFilter("[NormalizedName] IS NOT NULL");

                b.ToTable("AspNetRoles");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.RoleMenuEntity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<int?>("MenuId")
                    .HasColumnType("int");

                b.Property<string>("RoleId")
                    .HasColumnType("nvarchar(450)");

                b.HasKey("Id");

                b.HasIndex("MenuId");

                b.HasIndex("RoleId");

                b.ToTable("RoleMenus");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.ShoppingCategoryEntity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("Name")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ResponsableId")
                    .HasColumnType("nvarchar(450)");

                b.Property<int?>("SubCategoryId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("ResponsableId");

                b.HasIndex("SubCategoryId");

                b.ToTable("ShoppingCategories");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.ShoppingEntity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<int?>("AssignedGroupId")
                    .HasColumnType("int");

                b.Property<int?>("CompanyId")
                    .HasColumnType("int");

                b.Property<DateTime>("CreateDate")
                    .HasColumnType("datetime2");

                b.Property<int?>("CreateGroupId")
                    .HasColumnType("int");

                b.Property<int?>("ProjectId")
                    .HasColumnType("int");

                b.Property<int?>("StateId")
                    .HasColumnType("int");

                b.Property<double>("TotalValue")
                    .HasColumnType("float");

                b.Property<DateTime>("UpdateDate")
                    .HasColumnType("datetime2");

                b.Property<string>("UserAssignedId")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("UserCreateId")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("UserProjectBossId")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("observations")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.HasIndex("AssignedGroupId");

                b.HasIndex("CompanyId");

                b.HasIndex("CreateGroupId");

                b.HasIndex("ProjectId");

                b.HasIndex("StateId");

                b.HasIndex("UserAssignedId");

                b.HasIndex("UserCreateId");

                b.HasIndex("UserProjectBossId");

                b.ToTable("Shoppings");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.ShoppingItemsEntity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<int?>("CategoryId")
                    .HasColumnType("int");

                b.Property<string>("CodSAP")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Description")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("InternalOrder")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Mark")
                    .HasColumnType("nvarchar(max)");

                b.Property<int?>("MeasureId")
                    .HasColumnType("int");

                b.Property<string>("NumInternalOrder")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Observation")
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("Quantity")
                    .HasColumnType("int");

                b.Property<int>("QuantityDelivered")
                    .HasColumnType("int");

                b.Property<string>("Reference")
                    .HasColumnType("nvarchar(max)");

                b.Property<int?>("ShopingId")
                    .HasColumnType("int");

                b.Property<int?>("StateId")
                    .HasColumnType("int");

                b.Property<int?>("SubCategoryId")
                    .HasColumnType("int");

                b.Property<int?>("UnitId")
                    .HasColumnType("int");

                b.Property<string>("UserAssignedId")
                    .HasColumnType("nvarchar(450)");

                b.Property<decimal>("ValorTotal")
                    .HasColumnType("decimal(18,2)");

                b.Property<decimal>("ValorUnidad")
                    .HasColumnType("decimal(18,2)");

                b.HasKey("Id");

                b.HasIndex("CategoryId");

                b.HasIndex("MeasureId");

                b.HasIndex("ShopingId");

                b.HasIndex("StateId");

                b.HasIndex("SubCategoryId");

                b.HasIndex("UnitId");

                b.HasIndex("UserAssignedId");

                b.ToTable("ShoppingItems");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.ShoppingMeasureEntity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(50)")
                    .HasMaxLength(50);

                b.Property<int>("UnitId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("UnitId");

                b.ToTable("ShoppingMeasures");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.ShoppingStateEntity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(20)")
                    .HasMaxLength(20);

                b.Property<bool>("State")
                    .HasColumnType("bit");

                b.HasKey("Id");

                b.ToTable("ShoppingStates");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.ShoppingTempItems", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<int?>("CategoryId")
                    .HasColumnType("int");

                b.Property<string>("CodSAP")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("CreateDate")
                    .HasColumnType("datetime2");

                b.Property<string>("Description")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("InternalOrder")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Mark")
                    .HasColumnType("nvarchar(max)");

                b.Property<int?>("MeasureId")
                    .HasColumnType("int");

                b.Property<string>("NumInternalOrder")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Observation")
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("Quantity")
                    .HasColumnType("int");

                b.Property<string>("Reference")
                    .HasColumnType("nvarchar(max)");

                b.Property<int?>("ShoppingEntityId")
                    .HasColumnType("int");

                b.Property<int?>("SubCategoryId")
                    .HasColumnType("int");

                b.Property<int?>("UnitId")
                    .HasColumnType("int");

                b.Property<DateTime>("UpdateDate")
                    .HasColumnType("datetime2");

                b.Property<string>("UserCreateId")
                    .HasColumnType("nvarchar(450)");

                b.HasKey("Id");

                b.HasIndex("CategoryId");

                b.HasIndex("MeasureId");

                b.HasIndex("ShoppingEntityId");

                b.HasIndex("SubCategoryId");

                b.HasIndex("UnitId");

                b.HasIndex("UserCreateId");

                b.ToTable("ShoppingTempItems");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.ShoppingUnitEntity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(50)")
                    .HasMaxLength(50);

                b.HasKey("Id");

                b.ToTable("ShoppingUnits");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.TM_User_GroupEntity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<int?>("GroupId")
                    .HasColumnType("int");

                b.Property<string>("UserId")
                    .HasColumnType("nvarchar(450)");

                b.HasKey("Id");

                b.HasIndex("GroupId");

                b.HasIndex("UserId");

                b.ToTable("TM_User_Groups");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.TP_GroupEntity", b =>
            {
                b.Property<int?>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<int?>("CompanyId")
                    .HasColumnType("int");

                b.Property<string>("Email")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Name")
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("Stade")
                    .HasColumnType("bit");

                b.HasKey("Id");

                b.HasIndex("CompanyId");

                b.ToTable("TP_Groups");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.TP_Shopping_ArticleEntity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<int?>("CategoryId")
                    .HasColumnType("int");

                b.Property<string>("CodSAP")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Description")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("InternalOrder")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Mark")
                    .HasColumnType("nvarchar(max)");

                b.Property<int?>("MeasureId")
                    .HasColumnType("int");

                b.Property<string>("NumInternalOrder")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Refence")
                    .HasColumnType("nvarchar(max)");

                b.Property<int?>("SubCategoryId")
                    .HasColumnType("int");

                b.Property<int?>("UnitId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("CategoryId");

                b.HasIndex("MeasureId");

                b.HasIndex("SubCategoryId");

                b.HasIndex("UnitId");

                b.ToTable("TP_Shopping_Article");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.TP_Shopping_ItemProvedorEntity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<double>("Cantidad")
                    .HasColumnType("float");

                b.Property<string>("FileName")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("FilePath")
                    .HasColumnType("nvarchar(max)");

                b.Property<int?>("ItemId")
                    .HasColumnType("int");

                b.Property<string>("Name")
                    .HasColumnType("nvarchar(max)");

                b.Property<double>("PrecioTotal")
                    .HasColumnType("float");

                b.Property<double>("PrecioUnidad")
                    .HasColumnType("float");

                b.Property<string>("Telefono")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.HasIndex("ItemId");

                b.ToTable("TP_Shopping_ItemProvedorEntity");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.TP_Shopping_ItemSAPEntity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<int?>("CategoryId")
                    .HasColumnType("int");

                b.Property<string>("CodSAP")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Description")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("InternalOrder")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Mark")
                    .HasColumnType("nvarchar(max)");

                b.Property<int?>("MeasureId")
                    .HasColumnType("int");

                b.Property<string>("NumInternalOrder")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Reference")
                    .HasColumnType("nvarchar(max)");

                b.Property<int?>("SubCategoryId")
                    .HasColumnType("int");

                b.Property<int?>("UnitId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("CategoryId");

                b.HasIndex("MeasureId");

                b.HasIndex("SubCategoryId");

                b.HasIndex("UnitId");

                b.ToTable("TP_Shopping_ItemSAPEntity");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.TP_Shopping_Item_StateEntity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("Nombre")
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("State")
                    .HasColumnType("bit");

                b.HasKey("Id");

                b.ToTable("TP_Shopping_Item_State");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.TP_Shopping_Usu_Apr_GroEntity", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<int>("Amount")
                    .HasColumnType("int");

                b.Property<int>("Group")
                    .HasColumnType("int");

                b.Property<string>("User")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.ToTable("TP_Shopping_Usu_Apr_Gro");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.UserEntity", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("nvarchar(450)");

                b.Property<int>("AccessFailedCount")
                    .HasColumnType("int");

                b.Property<DateTime>("ActiveDate")
                    .HasColumnType("datetime2");

                b.Property<string>("Address")
                    .HasColumnType("nvarchar(500)")
                    .HasMaxLength(500);

                b.Property<int?>("CampusEntityId")
                    .HasColumnType("int");

                b.Property<int?>("CompanyId")
                    .HasColumnType("int");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("CreateDate")
                    .HasColumnType("datetime2");

                b.Property<string>("Document")
                    .IsRequired()
                    .HasColumnType("nvarchar(20)")
                    .HasMaxLength(20);

                b.Property<string>("Email")
                    .HasColumnType("nvarchar(256)")
                    .HasMaxLength(256);

                b.Property<bool>("EmailConfirmed")
                    .HasColumnType("bit");

                b.Property<string>("FirstName")
                    .IsRequired()
                    .HasColumnType("nvarchar(50)")
                    .HasMaxLength(50);

                b.Property<bool>("IsActive")
                    .HasColumnType("bit");

                b.Property<string>("LastName")
                    .IsRequired()
                    .HasColumnType("nvarchar(50)")
                    .HasMaxLength(50);

                b.Property<bool>("LockoutEnabled")
                    .HasColumnType("bit");

                b.Property<DateTimeOffset?>("LockoutEnd")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("NormalizedEmail")
                    .HasColumnType("nvarchar(256)")
                    .HasMaxLength(256);

                b.Property<string>("NormalizedUserName")
                    .HasColumnType("nvarchar(256)")
                    .HasMaxLength(256);

                b.Property<string>("PasswordHash")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("PhoneNumber")
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("PhoneNumberConfirmed")
                    .HasColumnType("bit");

                b.Property<string>("PhotoPath")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("SecurityStamp")
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("TwoFactorEnabled")
                    .HasColumnType("bit");

                b.Property<int?>("TypeDocumentId")
                    .HasColumnType("int");

                b.Property<string>("UserName")
                    .HasColumnType("nvarchar(256)")
                    .HasMaxLength(256);

                b.HasKey("Id");

                b.HasIndex("CampusEntityId");

                b.HasIndex("CompanyId");

                b.HasIndex("NormalizedEmail")
                    .HasName("EmailIndex");

                b.HasIndex("NormalizedUserName")
                    .IsUnique()
                    .HasName("UserNameIndex")
                    .HasFilter("[NormalizedUserName] IS NOT NULL");

                b.HasIndex("TypeDocumentId");

                b.ToTable("AspNetUsers");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
            {
                b.HasOne("Refosus.Web.Data.Entities.RoleEntity", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
            {
                b.HasOne("Refosus.Web.Data.Entities.UserEntity", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
            {
                b.HasOne("Refosus.Web.Data.Entities.UserEntity", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
            {
                b.HasOne("Refosus.Web.Data.Entities.RoleEntity", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Refosus.Web.Data.Entities.UserEntity", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
            {
                b.HasOne("Refosus.Web.Data.Entities.UserEntity", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.CampusDetailsEntity", b =>
            {
                b.HasOne("Refosus.Web.Data.Entities.CampusEntity", "Campus")
                    .WithMany("CampusDetails")
                    .HasForeignKey("CampusId");

                b.HasOne("Refosus.Web.Data.Entities.CompanyEntity", "Company")
                    .WithMany()
                    .HasForeignKey("CompanyId");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.CampusEntity", b =>
            {
                b.HasOne("Refosus.Web.Data.Entities.CityEntity", "City")
                    .WithMany("Campus")
                    .HasForeignKey("CityId");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.CeCoEntity", b =>
            {
                b.HasOne("Refosus.Web.Data.Entities.CompanyEntity", "Company")
                    .WithMany()
                    .HasForeignKey("CompanyId");

                b.HasOne("Refosus.Web.Data.Entities.UserEntity", "UserResponsible")
                    .WithMany()
                    .HasForeignKey("UserResponsibleId");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.CityEntity", b =>
            {
                b.HasOne("Refosus.Web.Data.Entities.DepartmentEntity", "Department")
                    .WithMany("Cities")
                    .HasForeignKey("DepartmentId");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.DepartmentEntity", b =>
            {
                b.HasOne("Refosus.Web.Data.Entities.CountryEntity", "Country")
                    .WithMany("Departments")
                    .HasForeignKey("CountryId");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.MenuEntity", b =>
            {
                b.HasOne("Refosus.Web.Data.Entities.MenuEntity", "Menu")
                    .WithMany()
                    .HasForeignKey("MenuId");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.MessageCheckEntity", b =>
            {
                b.HasOne("Refosus.Web.Data.Entities.UserEntity", "User")
                    .WithMany()
                    .HasForeignKey("UserId");

                b.HasOne("Refosus.Web.Data.Entities.MessageEntity", "message")
                    .WithMany("Checks")
                    .HasForeignKey("messageId");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.MessageEntity", b =>
            {
                b.HasOne("Refosus.Web.Data.Entities.CeCoEntity", "Ceco")
                    .WithMany()
                    .HasForeignKey("CecoId");

                b.HasOne("Refosus.Web.Data.Entities.CompanyEntity", "Company")
                    .WithMany()
                    .HasForeignKey("CompanyId");

                b.HasOne("Refosus.Web.Data.Entities.MessageBillStateEntity", "StateBill")
                    .WithMany()
                    .HasForeignKey("StateBillId");

                b.HasOne("Refosus.Web.Data.Entities.MessageStateEntity", "State")
                    .WithMany()
                    .HasForeignKey("StateId");

                b.HasOne("Refosus.Web.Data.Entities.MessageTypeEntity", "Type")
                    .WithMany()
                    .HasForeignKey("TypeId");

                b.HasOne("Refosus.Web.Data.Entities.UserEntity", "UserAut")
                    .WithMany()
                    .HasForeignKey("UserAutId");

                b.HasOne("Refosus.Web.Data.Entities.UserEntity", "UserCreate")
                    .WithMany()
                    .HasForeignKey("UserCreateId");

                b.HasOne("Refosus.Web.Data.Entities.UserEntity", "User")
                    .WithMany()
                    .HasForeignKey("UserId");

                b.HasOne("Refosus.Web.Data.Entities.UserEntity", "UserPros")
                    .WithMany()
                    .HasForeignKey("UserProsId");

                b.HasOne("Refosus.Web.Data.Entities.UserEntity", "UserSender")
                    .WithMany()
                    .HasForeignKey("UserSenderId");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.MessageFileEntity", b =>
            {
                b.HasOne("Refosus.Web.Data.Entities.MessageEntity", "message")
                    .WithMany("MessageFiles")
                    .HasForeignKey("messageId");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.MessagetransactionEntity", b =>
            {
                b.HasOne("Refosus.Web.Data.Entities.MessageEntity", "Message")
                    .WithMany("Transaction")
                    .HasForeignKey("MessageId");

                b.HasOne("Refosus.Web.Data.Entities.MessageBillStateEntity", "StateBillCreate")
                    .WithMany()
                    .HasForeignKey("StateBillCreateId");

                b.HasOne("Refosus.Web.Data.Entities.MessageBillStateEntity", "StateBillUpdate")
                    .WithMany()
                    .HasForeignKey("StateBillUpdateId");

                b.HasOne("Refosus.Web.Data.Entities.MessageStateEntity", "StateCreate")
                    .WithMany()
                    .HasForeignKey("StateCreateId");

                b.HasOne("Refosus.Web.Data.Entities.MessageStateEntity", "StateUpdate")
                    .WithMany()
                    .HasForeignKey("StateUpdateId");

                b.HasOne("Refosus.Web.Data.Entities.UserEntity", "UserBillAutho")
                    .WithMany()
                    .HasForeignKey("UserBillAuthoId");

                b.HasOne("Refosus.Web.Data.Entities.UserEntity", "UserBillFinished")
                    .WithMany()
                    .HasForeignKey("UserBillFinishedId");

                b.HasOne("Refosus.Web.Data.Entities.UserEntity", "UserCreate")
                    .WithMany()
                    .HasForeignKey("UserCreateId");

                b.HasOne("Refosus.Web.Data.Entities.UserEntity", "UserUpdate")
                    .WithMany()
                    .HasForeignKey("UserUpdateId");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.RoleMenuEntity", b =>
            {
                b.HasOne("Refosus.Web.Data.Entities.MenuEntity", "Menu")
                    .WithMany("roleMenus")
                    .HasForeignKey("MenuId");

                b.HasOne("Refosus.Web.Data.Entities.RoleEntity", "Role")
                    .WithMany("roleMenus")
                    .HasForeignKey("RoleId");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.ShoppingCategoryEntity", b =>
            {
                b.HasOne("Refosus.Web.Data.Entities.UserEntity", "Responsable")
                    .WithMany()
                    .HasForeignKey("ResponsableId");

                b.HasOne("Refosus.Web.Data.Entities.ShoppingCategoryEntity", "SubCategory")
                    .WithMany()
                    .HasForeignKey("SubCategoryId");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.ShoppingEntity", b =>
            {
                b.HasOne("Refosus.Web.Data.Entities.TP_GroupEntity", "AssignedGroup")
                    .WithMany()
                    .HasForeignKey("AssignedGroupId");

                b.HasOne("Refosus.Web.Data.Entities.CompanyEntity", "Company")
                    .WithMany()
                    .HasForeignKey("CompanyId");

                b.HasOne("Refosus.Web.Data.Entities.TP_GroupEntity", "CreateGroup")
                    .WithMany()
                    .HasForeignKey("CreateGroupId");

                b.HasOne("Refosus.Web.Data.Entities.ProjectEntity", "Project")
                    .WithMany()
                    .HasForeignKey("ProjectId");

                b.HasOne("Refosus.Web.Data.Entities.ShoppingStateEntity", "State")
                    .WithMany()
                    .HasForeignKey("StateId");

                b.HasOne("Refosus.Web.Data.Entities.UserEntity", "UserAssigned")
                    .WithMany()
                    .HasForeignKey("UserAssignedId");

                b.HasOne("Refosus.Web.Data.Entities.UserEntity", "UserCreate")
                    .WithMany()
                    .HasForeignKey("UserCreateId");

                b.HasOne("Refosus.Web.Data.Entities.UserEntity", "UserProjectBoss")
                    .WithMany()
                    .HasForeignKey("UserProjectBossId");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.ShoppingItemsEntity", b =>
            {
                b.HasOne("Refosus.Web.Data.Entities.ShoppingCategoryEntity", "Category")
                    .WithMany()
                    .HasForeignKey("CategoryId");

                b.HasOne("Refosus.Web.Data.Entities.ShoppingMeasureEntity", "Measure")
                    .WithMany()
                    .HasForeignKey("MeasureId");

                b.HasOne("Refosus.Web.Data.Entities.ShoppingEntity", "Shoping")
                    .WithMany("Items")
                    .HasForeignKey("ShopingId");

                b.HasOne("Refosus.Web.Data.Entities.TP_Shopping_Item_StateEntity", "State")
                    .WithMany()
                    .HasForeignKey("StateId");

                b.HasOne("Refosus.Web.Data.Entities.ShoppingCategoryEntity", "SubCategory")
                    .WithMany()
                    .HasForeignKey("SubCategoryId");

                b.HasOne("Refosus.Web.Data.Entities.ShoppingUnitEntity", "Unit")
                    .WithMany()
                    .HasForeignKey("UnitId");

                b.HasOne("Refosus.Web.Data.Entities.UserEntity", "UserAssigned")
                    .WithMany()
                    .HasForeignKey("UserAssignedId");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.ShoppingMeasureEntity", b =>
            {
                b.HasOne("Refosus.Web.Data.Entities.ShoppingUnitEntity", "Unit")
                    .WithMany()
                    .HasForeignKey("UnitId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.ShoppingTempItems", b =>
            {
                b.HasOne("Refosus.Web.Data.Entities.ShoppingCategoryEntity", "Category")
                    .WithMany()
                    .HasForeignKey("CategoryId");

                b.HasOne("Refosus.Web.Data.Entities.ShoppingMeasureEntity", "Measure")
                    .WithMany()
                    .HasForeignKey("MeasureId");

                b.HasOne("Refosus.Web.Data.Entities.ShoppingEntity", null)
                    .WithMany("ItemsTemp")
                    .HasForeignKey("ShoppingEntityId");

                b.HasOne("Refosus.Web.Data.Entities.ShoppingCategoryEntity", "SubCategory")
                    .WithMany()
                    .HasForeignKey("SubCategoryId");

                b.HasOne("Refosus.Web.Data.Entities.ShoppingUnitEntity", "Unit")
                    .WithMany()
                    .HasForeignKey("UnitId");

                b.HasOne("Refosus.Web.Data.Entities.UserEntity", "UserCreate")
                    .WithMany()
                    .HasForeignKey("UserCreateId");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.TM_User_GroupEntity", b =>
            {
                b.HasOne("Refosus.Web.Data.Entities.TP_GroupEntity", "Group")
                    .WithMany("Users")
                    .HasForeignKey("GroupId");

                b.HasOne("Refosus.Web.Data.Entities.UserEntity", "User")
                    .WithMany()
                    .HasForeignKey("UserId");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.TP_GroupEntity", b =>
            {
                b.HasOne("Refosus.Web.Data.Entities.CompanyEntity", "Company")
                    .WithMany()
                    .HasForeignKey("CompanyId");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.TP_Shopping_ArticleEntity", b =>
            {
                b.HasOne("Refosus.Web.Data.Entities.ShoppingCategoryEntity", "Category")
                    .WithMany()
                    .HasForeignKey("CategoryId");

                b.HasOne("Refosus.Web.Data.Entities.ShoppingMeasureEntity", "Measure")
                    .WithMany()
                    .HasForeignKey("MeasureId");

                b.HasOne("Refosus.Web.Data.Entities.ShoppingCategoryEntity", "SubCategory")
                    .WithMany()
                    .HasForeignKey("SubCategoryId");

                b.HasOne("Refosus.Web.Data.Entities.ShoppingUnitEntity", "Unit")
                    .WithMany()
                    .HasForeignKey("UnitId");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.TP_Shopping_ItemProvedorEntity", b =>
            {
                b.HasOne("Refosus.Web.Data.Entities.ShoppingItemsEntity", "Item")
                    .WithMany("Proveedores")
                    .HasForeignKey("ItemId");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.TP_Shopping_ItemSAPEntity", b =>
            {
                b.HasOne("Refosus.Web.Data.Entities.ShoppingCategoryEntity", "Category")
                    .WithMany()
                    .HasForeignKey("CategoryId");

                b.HasOne("Refosus.Web.Data.Entities.ShoppingMeasureEntity", "Measure")
                    .WithMany()
                    .HasForeignKey("MeasureId");

                b.HasOne("Refosus.Web.Data.Entities.ShoppingCategoryEntity", "SubCategory")
                    .WithMany()
                    .HasForeignKey("SubCategoryId");

                b.HasOne("Refosus.Web.Data.Entities.ShoppingUnitEntity", "Unit")
                    .WithMany()
                    .HasForeignKey("UnitId");
            });

            modelBuilder.Entity("Refosus.Web.Data.Entities.UserEntity", b =>
            {
                b.HasOne("Refosus.Web.Data.Entities.CampusEntity", null)
                    .WithMany("Users")
                    .HasForeignKey("CampusEntityId");

                b.HasOne("Refosus.Web.Data.Entities.CompanyEntity", "Company")
                    .WithMany("Users")
                    .HasForeignKey("CompanyId");

                b.HasOne("Refosus.Web.Data.Entities.DocumentTypeEntity", "TypeDocument")
                    .WithMany()
                    .HasForeignKey("TypeDocumentId");
            });
#pragma warning restore 612, 618
        }
    }
}
